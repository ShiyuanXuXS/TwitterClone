@* @model TwitterClone.Models.Tweet *@
@model dynamic

@{
    Tweet tweet = Model.Tweet;
    string bodyContainerId = Model.BodyContainerId;
}

@{
    var isCurrentUserAuthor = User.Identity.Name == tweet.Author.UserName;
}

<div class="">
    <div class="card tweetCard border-0">
        <div class="card-body p-2">
            <!-- Author and follow button-->
            <div class="d-flex align-items-center mb-2">
                <!-- Avatar -->
                @if (!string.IsNullOrEmpty(tweet.Author.Avatar))
                {
                    <img src="@tweet.Author.Avatar" alt="Author Avatar" class="rounded-circle" width="32" height="32">
                }
                else
                {
                    <i class="bi bi-person-fill fs-4 text-muted"></i>
                }
                <!-- Author Name -->
                <div class="ms-2">
                    <h6 class="mb-0 fs-6">@tweet.Author.NickName</h6>
                    <p class="text-muted fs-6 mb-0">@tweet.Author.UserName</p>
                </div>
                <!-- Follow Button -->
                <button type="button" class="followButton btn btn-light ms-auto" data-user-id="@tweet.Author.Id">
                    <i id="followIcon-@tweet.Author.Id" class="bi bi-person-plus-fill"></i>
                </button>
            </div>
            <!-- Tweet body and buttons -->
            <div class="border fs-6">
                <!-- Tweet Body -->
                @{
                    string bodyId = string.IsNullOrEmpty(bodyContainerId)
                        ? $"tweetBody-{tweet.Id}"
                        : $"{bodyContainerId}-{tweet.Id}";
                }
                <div id="@bodyId" class="CKEditor-noborder"></div>
                <script>
                    ClassicEditor
                        .create(document.querySelector('#@bodyId'), {
                            isReadOnly: true,
                            toolbar: [],
                        })
                        .then(editor => {
                            editor.setData(`@Html.Raw(tweet.Body)`);
                            editor.enableReadOnlyMode('#@bodyId');
                        })
                        .catch(error => {
                            console.error(error);
                        });
                </script>
                <!-- ReTweet -->

                <div class="fs-6">
                    @if (tweet.ParentTweet != null)
                    {
                        @await Html.PartialAsync("_TweetCard", new { Tweet = tweet.ParentTweet, BodyContainerId = bodyId })

                    }
                </div>
            </div>
            <!-- CreatedAt -->
            <p class="card-text"><small class="text-muted">@Html.DisplayFor(modelItem => tweet.CreatedAt)</small></p>
            <div class="btn-group" role="group" aria-label="">
                    <!-- reply Button -->
                    <button id="replyButton-@bodyId" type="button" class="btn btn-light mx-2 rounded">
                        <i class="bi bi-chat"></i>
                    </button>
                    <!-- Retweet Button -->
                    <a href="/ShowTweet/AddEditTweet?reTweetId=@tweet.Id" class="btn btn-light mx-2 rounded">
                        <i class="bi bi-arrow-repeat"></i>
                    </a>
                    <!-- Like Button -->
                    <button id="likeButton-@bodyId" type="button" class="likeButton btn btn-light mx-2 rounded" tweetId="@tweet.Id">
                        <svg id="likeIcon-@bodyId" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="gray" class="bi bi-heart-fill" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314"/>
                        </svg>
                    </button>
                    <script>
                        var likeButton = document.getElementById(`likeButton-@bodyId`);
                        var likeIcon=document.getElementById(`likeIcon-@bodyId`);
                        //set color of like icon 
                        fetch(`/api/Like/getLikeStatus?tweetId=@tweet.Id`)
                        .then(response=>response.json())
                        .then(data => {
                            @* var likeIcon=document.getElementById(`likeIcon-@tweet.Id`); *@
                            var likeIcon=document.getElementById(`likeIcon-@bodyId`);
                            if (data.liked) {
                                likeIcon.setAttribute('fill', 'red');
                            } else {
                                likeIcon.setAttribute('fill', 'gray');
                            }
                        })
                        .catch(error => {
                            console.error(error);
                        });
                        //add click event handler on like button
                        likeButton.addEventListener('click',()=>{
                            fetch('/api/Like/setLike?tweetId=@tweet.Id',{
                                method:'post'
                            })
                            .then(response=>response.json())
                            .then(data=>{
                                var likeIcons=document.querySelectorAll(`[id^="likeIcon-"][id$="-${@tweet.Id}"]`)
                                @* console.log(likeIcons) *@
                                likeIcons.forEach(likeIcon=>{
                                    
                                    if (data.liked) {
                                        likeIcon.setAttribute('fill', 'red');
                                    }else{
                                        likeIcon.setAttribute('fill', 'gray');
                                    }
                                })
                            })
                        })

                    </script>

                @if (isCurrentUserAuthor)
                {
                    <!-- Edit Button -->
                    <a href="/ShowTweet/AddEditTweet?id=@tweet.Id" class="btn btn-light mx-2 rounded">
                        <i class="bi bi-pencil"></i>
                    </a>
                    <!-- Delete Button -->
                    <a href="/ShowTweet/DeleteTweet?id=@tweet.Id" class="btn btn-danger mx-2 rounded">
                        <i class="bi bi-trash"></i>
                    </a>
                }
            </div>
            <!-- Replies -->
            <div id="replySection-@bodyId" class="tweet-card-reply border fs-6" style="display: none;">
                <input type="text" id="replyInput-@bodyId" class="form-control mb-2 my-2" placeholder="Your reply">
                <button id="replyConfirm-@bodyId" class="btn btn-primary">Confirm</button>
                <ul id="replyList-@bodyId" class="my-2"></ul>
                <script>
                    // reply confirm
                        document.getElementById('replyConfirm-@bodyId').addEventListener('click', function () {
                            var replyBody = document.getElementById('replyInput-@bodyId').value.trim();
                            if (!replyBody) {return}
                            fetch('/api/Reply/addReply', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    tweetId: @tweet.Id,  
                                    replyBody: replyBody
                                })
                            })
                            .then(response => response.json())
                            .then(data => {
                                // Access the reply data from the response
                                var replyData = data.replyData;

                                // Add the replyData to the ul element
                                var replyList = document.getElementById(`replyList-@bodyId`);
                                var replyItem = document.createElement('li');

                                // Create elements for author's information
                                var commenterInfo = document.createElement('div');
                                commenterInfo.className = 'd-flex align-items-center mb-2';

                                // Avatar
                                if (replyData.commenter.avatar) {
                                    var avatar = document.createElement('img');
                                    avatar.src = replyData.commenter.avatar;
                                    avatar.alt = 'Author Avatar';
                                    avatar.className = 'rounded-circle';
                                    avatar.width = 32;
                                    avatar.height = 32;
                                    commenterInfo.appendChild(avatar);
                                } else {
                                    var defaultAvatar = document.createElement('i');
                                    defaultAvatar.className = 'bi bi-person-fill fs-4 text-muted';
                                    commenterInfo.appendChild(defaultAvatar);
                                }

                                // Commenter Name and UserName
                                var commenterDetails = document.createElement('div');
                                commenterDetails.className = 'ms-2';
                                var nickName = document.createElement('h6');
                                nickName.className = 'mb-0 fs-6';
                                nickName.textContent = replyData.commenter.nickName;
                                var userName = document.createElement('p');
                                userName.className = 'text-muted fs-6 mb-0';
                                userName.textContent = replyData.commenter.userName;
                                commenterDetails.appendChild(nickName);
                                commenterDetails.appendChild(userName);
                                commenterInfo.appendChild(commenterDetails);

                                // Append commenter's information and reply text to the list item
                                replyItem.appendChild(commenterInfo);
                                var replyText = document.createElement('p');
                                replyText.textContent = replyData.body;
                                replyItem.appendChild(replyText);

                                // CreatedAt information
                                var createdAtInfo = document.createElement('p');
                                createdAtInfo.className = 'card-text';
                                var small = document.createElement('small');
                                small.className = 'text-muted';
                                small.textContent = replyData.createdAt; 
                                createdAtInfo.appendChild(small);
                                replyItem.appendChild(createdAtInfo);

                                // Append the list item to the reply list
                                replyList.appendChild(replyItem);
                                console.log('Reply added successfully:', data);
                            })
                            .catch(error => {
                                console.error('Error adding reply:', error);
                            });
                        });
                </script>
                
            </div>
            <script>
                // click reply button
                document.getElementById(`replyButton-@bodyId`).addEventListener('click', function () {
                    var replySection = document.getElementById('replySection-@bodyId');
                    if (replySection.style.display=='block'){
                        replySection.style.display='none'
                        return
                    }
                    fetch(`/api/Reply/getReplies?tweetId=@tweet.Id`)
                        .then(response=>response.json())
                        .then(replies=>{
                            var replyList=document.getElementById(`replyList-@bodyId`)
                            replyList.innerHTML=""
                            replies.forEach(reply=>{
                                console.log(reply)
                                var replyItem=document.createElement('li')// Create elements for author's information
                                var commenterInfo = document.createElement('div');
                                commenterInfo.className = 'd-flex align-items-center mb-2';

                                // Avatar
                                if (reply.commenter.avatar) {
                                    var avatar = document.createElement('img');
                                    avatar.src = reply.commenter.avatar;
                                    avatar.alt = 'Author Avatar';
                                    avatar.className = 'rounded-circle';
                                    avatar.width = 32;
                                    avatar.height = 32;
                                    commenterInfo.appendChild(avatar);
                                } else {
                                    var defaultAvatar = document.createElement('i');
                                    defaultAvatar.className = 'bi bi-person-fill fs-4 text-muted';
                                    commenterInfo.appendChild(defaultAvatar);
                                }

                                // commenter nickName and userName
                                var commenterDetails = document.createElement('div');
                                commenterDetails.className = 'ms-2';
                                var nickName = document.createElement('h6');
                                nickName.className = 'mb-0 fs-6';
                                nickName.textContent = reply.commenter.nickName;
                                var userName = document.createElement('p');
                                userName.className = 'text-muted fs-6 mb-0';
                                userName.textContent = reply.commenter.userName;
                                commenterDetails.appendChild(nickName);
                                commenterDetails.appendChild(userName);
                                commenterInfo.appendChild(commenterDetails);
                                replyItem.appendChild(commenterInfo);

                                // reply text
                                var replyText = document.createElement('p');
                                replyText.textContent = reply.body;
                                replyItem.appendChild(replyText);

                                // CreatedAt 
                                var createdAtInfo = document.createElement('p');
                                createdAtInfo.className = 'card-text';
                                var small = document.createElement('small');
                                small.className = 'text-muted';
                                small.textContent = reply.createdAt; 
                                createdAtInfo.appendChild(small);
                                replyItem.appendChild(createdAtInfo);

                                replyList.appendChild(replyItem)
                            })
                        })
                        .then(()=>{
                            replySection.style.display = 'block'
                        })
                        .catch(err=>{
                            console.log("error fetching replies: ",err)
                        })
                });
            </script>

        </div>
    </div>


</div>
